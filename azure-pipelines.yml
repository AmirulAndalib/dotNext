variables:
  Solution: src/DotNext.sln
  TestFolder: src/DotNext.Tests
  TestProject: $(TestFolder)/DotNext.Tests.csproj
  InternetAccess: false
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]
trigger:
  - master
  - develop
stages:
  - stage: Tests
    jobs:
      - job: Test on Windows
        pool:
          vmImage: windows-latest
        steps:
          - task: DotNetCoreCLI@2
            displayName: Restore Packages
            inputs:
              command: restore
              projects: '$(Solution)'
              feedsToUse: 'config'
              nugetConfigPath: 'NuGet.config'
          - task: DotNetCoreCLI@2
            displayName: Test Debug
            inputs:
              command: test
              projects: $(TestProject)
              arguments: --configuration Debug --collect "Code coverage"
              nobuild: false
              testRunTitle: 'Debug on Windows'
              publishTestResults: true
              
      - job: Test on Linux
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: DotNetCoreCLI@2
            displayName: Restore Packages
            inputs:
              command: restore
              projects: '$(Solution)'
              feedsToUse: 'config'
              nugetConfigPath: 'NuGet.config'
              arguments: --configuration Debug
          - task: DotNetCoreCLI@2
            displayName: Test Debug
            inputs:
              command: test
              projects: $(TestProject)
              arguments: --configuration Debug --collect "Code coverage"
              nobuild: false
              testRunTitle: 'Debug on Linux'
              publishTestResults: true
  - stage: Build Packages
    condition: and(succeeded('Tests'), eq(variables.isMain, true))
    jobs:
      - job: Pack on Linux
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: DotNetCoreCLI@2
            displayName: Pack
            inputs:
              command: pack
              configuration: Release
              packDirectory: $(Build.ArtifactStagingDirectory)/artifacts
              verbosityPack: Minimal
              packagesToPack: src/DotNext/DotNext.csproj;src/DotNext.IO/DotNext.IO.csproj;src/DotNext.Metaprogramming/DotNext.Metaprogramming.csproj;src/DotNext.Reflection/DotNext.Reflection.csproj;src/DotNext.Threading/DotNext.Threading.csproj;src/DotNext.Unsafe/DotNext.Unsafe.csproj;src/cluster/DotNext.Net.Cluster/DotNext.Net.Cluster.csproj;src/cluster/DotNext.AspNetCore.Cluster/DotNext.AspNetCore.Cluster.csproj
          - publish: build
            displayName: Publish signing config
            artifact: config
          - publish: $(Build.ArtifactStagingDirectory)/artifacts
            displayName: Publish artifacts
            artifact: BuildPackages
  - stage: Sign Packages
    condition: succeeded('Build Packages')
    jobs:
      - deployment: CodeSign
        displayName: Code Signing
        pool:
          vmImage: windows-latest
        environment: Code Sign - Approvals
        variables:
          - group: Sign Client Credentials
        strategy:
          runOnce:
            deploy:
              steps:
                - task: ms-codeanalysis.vss-microsoft-security-code-analysis-devops.build-task-antimalware.AntiMalware@3
                  displayName: AntiMalware Scan
                  inputs:
                    EnableServices: true
                    FileDirPath: $(Pipeline.Workspace)\BuildPackages
                - task: DotNetCoreCLI@2
                  displayName: Install SignTool tool
                  inputs:
                    command: custom
                    custom: tool
                    arguments: install --tool-path . SignClient
                - pwsh: |
                    .\SignClient "Sign" `
                    --baseDirectory "$(Pipeline.Workspace)\BuildPackages" `
                    --input "**/*.nupkg" `
                    --config "$(Pipeline.Workspace)\config\signclient.json" `
                    --user "$(SignClientUser)" `
                    --secret '$(SignClientSecret)' `
                    --name ".NEXT" `
                    --description ".NEXT" `
                    --descriptionUrl "https://github.com/dotnet/dotNext"
                  displayName: Sign packages
                - publish: $(Pipeline.Workspace)/BuildPackages
                  displayName: Publish Signed Packages
                  artifact: SignedPackages