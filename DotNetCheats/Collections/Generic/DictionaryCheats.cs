using System;
using System.Collections.Generic;

namespace Cheats.Collections.Generic
{
	public static class DictionaryCheats
	{
		public static void Deconstruct<T1, T2>(this KeyValuePair<T1, T2> tuple, out T1 key, out T2 value)
		{
			key = tuple.Key;
			value = tuple.Value;
		}

		/// <summary>
		/// Adds a key-value pair to the dictionary if the key does not exist.
		/// </summary>
		/// <typeparam name="K">The key type of the dictionary.</typeparam>
		/// <typeparam name="V">The value type of the dictionary.</typeparam>
		/// <param name="dictionary">The source dictionary.</param>
		/// <param name="key">The key of the key-value pair.</param>
		/// <param name="value">The value of the key-value pair.</param>
		/// <returns>
		/// The corresponding value in the dictionary if <paramref name="key"/> already exists, 
		/// or <paramref name="value"/>.
		/// </returns>
		/// <exception cref="ArgumentNullException">
		/// <paramref name="dictionary"/> is null.
		/// </exception>
		public static V GetOrAdd<K, V>(this Dictionary<K, V> dictionary, K key, V value)
		{
			if (dictionary is null)
				throw new ArgumentNullException(nameof(dictionary));
			else if (dictionary.TryGetValue(key, out var temp))
				value = temp;
			else
				dictionary.Add(key, value);
			return value;
		}

		/// <summary>
		/// Generates a value and adds the key-value pair to the dictionary if the key does not
		/// exist.
		/// </summary>
		/// <typeparam name="K">The key type of the dictionary.</typeparam>
		/// <typeparam name="V">The value type of the dictionary.</typeparam>
		/// <param name="dictionary">The source dictionary.</param>
		/// <param name="key">The key of the key-value pair.</param>
		/// <param name="valueFactory">
		/// The function used to generate the value from the key.
		/// </param>
		/// <returns>
		/// The corresponding value in the dictionary if <paramref name="key"/> already exists, 
		/// or the value generated by <paramref name="valueFactory"/>.
		/// </returns>
		/// <exception cref="ArgumentNullException">
		/// <paramref name="dictionary"/> or <paramref name="valueFactory"/> is null.
		/// </exception>
		public static V GetOrAdd<K, V>(this Dictionary<K, V> dictionary, K key, Func<K, V> valueFactory)
		{
			if (dictionary is null)
				throw new ArgumentNullException(nameof(dictionary));
			else if (valueFactory is null)
				throw new ArgumentNullException(nameof(valueFactory));
			else if (dictionary.TryGetValue(key, out var value))
				return value;
			else
			{
				value = valueFactory(key);
				dictionary.Add(key, value);
				return value;
			}
		}

		public static void ForEach<K, V>(this IDictionary<K, V> dictionary, Action<K, V> action)
		{
			foreach (var (key, value) in dictionary)
				action(key, value);
		}

		public static V GetOrDefault<K, V>(this IDictionary<K, V> dictionary, K key, V defaultValue = default)
			=> dictionary.TryGetValue(key, out var value) ? value : defaultValue;

		public static V GetOrInvoke<K, V>(this IDictionary<K, V> dictionary, K key, Func<V> defaultValue)
			=> dictionary.TryGetValue(key, out var value) ? value : defaultValue();

		public static Optional<T> MapKey<K, V, T>(this IDictionary<K, V> dictionary, K key, Converter<V, T> mapper)
			=> dictionary.TryGetValue(key, out var value) ? mapper(value) : Optional<T>.Empty;

		public static bool MapKey<K, V, T>(this IDictionary<K, V> dictionary, K key, Converter<V, T> mapper, out T value)
			=> dictionary.MapKey(key, mapper).TryGet(out value);

		public static ReadOnlyDictionaryView<K, V> AsReadOnlyView<K, V>(this IDictionary<K, V> dictionary)
			=> new ReadOnlyDictionaryView<K, V>(dictionary);

		public static ReadOnlyDictionaryView<K, V, T> Map<K, V, T>(this IReadOnlyDictionary<K, V> dictionary, Converter<V, T> mapper)
			=> new ReadOnlyDictionaryView<K, V, T>(dictionary, mapper);
	}
}
