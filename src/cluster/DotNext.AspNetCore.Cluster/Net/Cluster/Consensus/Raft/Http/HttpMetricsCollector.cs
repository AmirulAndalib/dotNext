using System.Diagnostics.Metrics;
using System.Diagnostics.Tracing;
using System.Net;

namespace DotNext.Net.Cluster.Consensus.Raft.Http;

using IClientMetricsCollector = Metrics.IClientMetricsCollector;

/// <summary>
/// Contains a set of callbacks that can be used to report
/// runtime metrics generated by HTTP-specific implementation of Raft cluster node.
/// </summary>
/// <remarks>
/// You need to register singleton service of type <see cref="MetricsCollector"/>
/// to collect metrics produced by Raft node.
/// </remarks>
public class HttpMetricsCollector : MetricsCollector, IClientMetricsCollector
{
    private const string MessageTypeTag = "dotnext.raft.rpc.method";
    private const string NodeAddress = "http.url";

    private object? responseTimeMeter;

    /// <inheritdoc cref="IClientMetricsCollector.ReportResponseTime(TimeSpan)"/>
    [Obsolete("Override ReportResponseTime(TimeSpan, string, EndPoint) method instead")]
    public virtual void ReportResponseTime(TimeSpan value)
        => ReportResponseTime(value, "undefined", new DnsEndPoint("undefined", 0));

    /// <inheritdoc cref="IClientMetricsCollector.ReportResponseTime(TimeSpan, string, EndPoint)"/>
    public virtual void ReportResponseTime(TimeSpan value, string requestTag, EndPoint address)
    {
    }

    /// <inheritdoc/>
    void IClientMetricsCollector.ReportResponseTime(TimeSpan value, string requestTag, EndPoint address)
    {
        switch (responseTimeMeter)
        {
            case Histogram<double> { Enabled: true } histogram:
                histogram.Record(value.TotalMilliseconds, new(MessageTypeTag, requestTag), new(NodeAddress, address));
                goto default;
            case EventCounter counter:
                counter.WriteMetric(value.TotalMilliseconds);
                goto default;
            default:
                ReportResponseTime(value, requestTag, address);
                break;
        }
    }

    /// <summary>
    /// Gets or sets counter that allows to count response time from every cluster node.
    /// </summary>
    [Obsolete("Use ResponseTimeMeter property instead.")]
    public EventCounter? ResponseTimeCounter
    {
        get => responseTimeMeter as EventCounter;
        set => responseTimeMeter = value;
    }

    /// <summary>
    /// Gets or sets a meter that allows to count response time from every cluster node.
    /// </summary>
    [CLSCompliant(false)]
    public Histogram<double>? ResponseTimeMeter
    {
        get => responseTimeMeter as Histogram<double>;
        set => responseTimeMeter = value;
    }
}