using DotNext.Net.Cluster.Consensus.Raft;
using DotNext.Threading;
using static System.Threading.Timeout;

namespace RaftNode;

internal sealed class DataModifier : BackgroundService
{
    private readonly IRaftCluster cluster;
    private readonly IValueProvider valueProvider;

    public DataModifier(IRaftCluster cluster, IValueProvider provider)
    {
        this.cluster = cluster;
        valueProvider = provider;
    }

    protected override async Task ExecuteAsync(CancellationToken stoppingToken)
    {
        while (!stoppingToken.IsCancellationRequested)
        {
            await Task.Delay(1000, stoppingToken).ConfigureAwait(false);

            var leadershipToken = cluster.LeadershipToken;
            if (!leadershipToken.IsCancellationRequested)
            {
                var newValue = valueProvider.Value + 500L;
                Console.WriteLine("Saving value {0} generated by the leader node", newValue);

                var source = stoppingToken.LinkTo(leadershipToken);
                try
                {
                    var entry = new Int64LogEntry { Content = newValue, Term = cluster.Term };
                    await cluster.ReplicateAsync(entry, InfiniteTimeSpan, stoppingToken);
                }
                catch (Exception e)
                {
                    Console.WriteLine("Unexpected error {0}", e);
                }
                finally
                {
                    source?.Dispose();
                }
            }
        }
    }
}