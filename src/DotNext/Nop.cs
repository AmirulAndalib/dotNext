using System;

namespace DotNext
{
    /// <summary>
    /// Represents action that does nothing.
    /// </summary>
    public static class Nop
    {
        private static void _() { }

        private static void _<T>(T arg) { }

        private static void _<T1, T2>(T1 arg1, T2 arg2) { }

        private static void _<T1, T2, T3>(T1 arg1, T2 arg2, T3 arg3) { }

        private static void _<T1, T2, T3, T4>(T1 arg1, T2 arg2, T3 arg3, T4 arg4) { }

        private static void _<T1, T2, T3, T4, T5>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) { }

        private static void _<T1, T2, T3, T4, T5, T6>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) { }

        private static void _<T1, T2, T3, T4, T5, T6, T7>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) { }

        private static void _<T1, T2, T3, T4, T5, T6, T7, T8>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) { }

        private static void _<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) { }

        private static void _<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) { }

        private static class EmptyAction
        {
            internal static readonly Action Value = _;
        }

        private static class EmptyAction<T>
        {
            internal static readonly Action<T> Value = _<T>;
        }

        private static class EmptyAction<T1, T2>
        {
            internal static readonly Action<T1, T2> Value = _<T1, T2>;
        }

        private static class EmptyAction<T1, T2, T3>
        {
            internal static readonly Action<T1, T2, T3> Value = _<T1, T2, T3>;
        }

        private static class EmptyAction<T1, T2, T3, T4>
        {
            internal static readonly Action<T1, T2, T3, T4> Value = _<T1, T2, T3, T4>;
        }

        private static class EmptyAction<T1, T2, T3, T4, T5>
        {
            internal static readonly Action<T1, T2, T3, T4, T5> Value = _<T1, T2, T3, T4, T5>;
        }

        private static class EmptyAction<T1, T2, T3, T4, T5, T6>
        {
            internal static readonly Action<T1, T2, T3, T4, T5, T6> Value = _<T1, T2, T3, T4, T5, T6>;
        }

        private static class EmptyAction<T1, T2, T3, T4, T5, T6, T7>
        {
            internal static readonly Action<T1, T2, T3, T4, T5, T6, T7> Value = _<T1, T2, T3, T4, T5, T6, T7>;
        }

        private static class EmptyAction<T1, T2, T3, T4, T5, T6, T7, T8>
        {
            internal static readonly Action<T1, T2, T3, T4, T5, T6, T7, T8> Value = _<T1, T2, T3, T4, T5, T6, T7, T8>;
        }

        private static class EmptyAction<T1, T2, T3, T4, T5, T6, T7, T8, T9>
        {
            internal static readonly Action<T1, T2, T3, T4, T5, T6, T7, T8, T9> Value = _<T1, T2, T3, T4, T5, T6, T7, T8, T9>;
        }

        private static class EmptyAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
        {
            internal static readonly Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Value = _<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>;
        }

        private static class EmptyEventHandler
        {
            internal static readonly EventHandler Value = _<object, EventArgs>;
        }

        private static class EmptyEventHandler<TEventArgs>
        {
            internal static readonly EventHandler<TEventArgs> Value = _<object, TEventArgs>;
        }

        /// <summary>
        /// Returns action that does nothing.
        /// </summary>
        /// <remarks>
        /// This method returns the same instance of predicate on every call.
        /// </remarks>
        /// <returns>No-op action.</returns>
        public static Action Action() => EmptyAction.Value;

        /// <summary>
        /// Returns event handler that does nothing.
        /// </summary>
        /// <remarks>
        /// This method returns the same instance of predicate on every call.
        /// </remarks>
        /// <returns>No-op event handler.</returns>
        public static EventHandler EventHandler() => EmptyEventHandler.Value;

        /// <summary>
        /// Returns event handler that does nothing.
        /// </summary>
        /// <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
        /// <remarks>
        /// This method returns the same instance of predicate on every call.
        /// </remarks>
        /// <returns>No-op event handler.</returns>
        public static EventHandler<TEventArgs> EventHandler<TEventArgs>() => EmptyEventHandler<TEventArgs>.Value;

        /// <summary>
        /// Returns action that does nothing.
        /// </summary>
        /// <typeparam name="T">The first argument of the action.</typeparam>
        /// <remarks>
        /// This method returns the same instance of predicate on every call.
        /// </remarks>
        /// <returns>No-op action.</returns>
        public static Action<T> Action<T>() => EmptyAction<T>.Value;

        public static Action<T1, T2> Action<T1, T2>() => EmptyAction<T1, T2>.Value;

        public static Action<T1, T2, T3> Action<T1, T2, T3>() => EmptyAction<T1, T2, T3>.Value;

        public static Action<T1, T2, T3, T4> Action<T1, T2, T3, T4>() => EmptyAction<T1, T2, T3, T4>.Value;

        public static Action<T1, T2, T3, T4, T5> Action<T1, T2, T3, T4, T5>() => EmptyAction<T1, T2, T3, T4, T5>.Value;

        public static Action<T1, T2, T3, T4, T5, T6> Action<T1, T2, T3, T4, T5, T6>() => EmptyAction<T1, T2, T3, T4, T5, T6>.Value;

        public static Action<T1, T2, T3, T4, T5, T6, T7> Action<T1, T2, T3, T4, T5, T6, T7>() => EmptyAction<T1, T2, T3, T4, T5, T6, T7>.Value;

        public static Action<T1, T2, T3, T4, T5, T6, T7, T8> Action<T1, T2, T3, T4, T5, T6, T7, T8>() => EmptyAction<T1, T2, T3, T4, T5, T6, T7, T8>.Value;

        public static Action<T1, T2, T3, T4, T5, T6, T7, T8, T9> Action<T1, T2, T3, T4, T5, T6, T7, T8, T9>() => EmptyAction<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Value;

        public static Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>() => EmptyAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Value;
    }
}